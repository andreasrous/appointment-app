generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  BUSINESS_OWNER
  USER
}

enum Day {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Status {
  CONFIRMED
  CANCELED
  COMPLETED
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  emailVerified         DateTime?
  password              String?
  role                  UserRole               @default(USER)
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  grantId               String?
  grantEmail            String?
  image                 String?
  accounts              Account[]

  business           Business?
  appointments       Appointment[]
  favoriteBusinesses Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Business {
  id          String  @id @default(cuid())
  name        String
  description String?
  email       String
  phone       String?
  address     String?
  logo        String?
  ownerId     String  @unique
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  services       Service[]
  employees      Employee[]
  availabilities Availability[]
  appointments   Appointment[]
  favoritedBy    Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Availability {
  id         String   @id @default(cuid())
  dayOfWeek  Day
  startTime  String
  endTime    String
  isActive   Boolean  @default(true)
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Service {
  id          String   @id @default(cuid())
  name        String
  description String?
  duration    Int
  price       Float
  isActive    Boolean  @default(true)
  businessId  String
  business    Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  employees    EmployeeService[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Employee {
  id         String   @id @default(cuid())
  name       String
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  services     EmployeeService[]
  appointments Appointment[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeService {
  id         String   @id @default(cuid())
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([employeeId, serviceId])
}

model Appointment {
  id              String   @id @default(cuid())
  title           String
  description     String?
  location        String?
  startTime       DateTime
  endTime         DateTime
  status          Status   @default(CONFIRMED)
  calendarEventId String   @unique

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  serviceId String
  service   Service @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessId String
  business   Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
}
